import React, { useState, useEffect } from 'react';
import Calendar from './Calendar';
import DoctorFilter from './DoctorFilter';
import ScheduleForm from './ScheduleForm';
import ScheduleDetail from './ScheduleDetail';
import { Row, Col, Form, Spinner } from 'react-bootstrap';
import { notification } from 'antd';
import { BsCalendarPlus } from 'react-icons/bs';
import moment from 'moment';
import './CustomButtons.css';
import './Schedule.css';
import { ScheduleStatus, StatusMapping } from '../../../types/schedule.types';
import { checkBackendConnection, createScheduleAPI, deleteScheduleAPI, getAllSchedulesAPI, updateScheduleAPI } from '../../../services/schedule.service';

const ManagerSchedule = () => {
    const [showForm, setShowForm] = useState(false);
    const [showDetail, setShowDetail] = useState(false);
    const [selectedDate, setSelectedDate] = useState(new Date());
    const [selectedDoctor, setSelectedDoctor] = useState(null);
    const [selectedSchedule, setSelectedSchedule] = useState(null);
    const [schedules, setSchedules] = useState([]);

    const [loading, setLoading] = useState(true);
    const [initialLoadComplete, setInitialLoadComplete] = useState(false);

    const [backendConnected, setBackendConnected] = useState(true);

    // X√≥a b·∫•t k·ª≥ d·ªØ li·ªáu l·ªãch n√†o c√≥ th·ªÉ ƒë∆∞·ª£c l∆∞u trong localStorage
    useEffect(() => {
        const localStorageKeys = Object.keys(localStorage);
        localStorageKeys.forEach(key => {
            if (key.includes('fullcalendar') || key.includes('fc-') ||
                key.includes('calendar') || key.includes('event') ||
                key.includes('schedule')) {
                console.log('Removing from localStorage in ManagerSchedule:', key);
                localStorage.removeItem(key);
            }
        });

        // X√≥a b·∫•t k·ª≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c l∆∞u tr·ªØ trong sessionStorage
        const sessionStorageKeys = Object.keys(sessionStorage);
        sessionStorageKeys.forEach(key => {
            if (key.includes('fullcalendar') || key.includes('fc-') ||
                key.includes('calendar') || key.includes('event') ||
                key.includes('schedule')) {
                console.log('Removing from sessionStorage in ManagerSchedule:', key);
                sessionStorage.removeItem(key);
            }
        });

        // Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn backend
        // B·ªè qua l·ªói k·∫øt n·ªëi v√† ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
        try {
            checkBackendConnection()
                .then(result => {
                    setBackendConnected(result.success);
                    // Lu√¥n t·∫£i d·ªØ li·ªáu b·∫•t k·ªÉ k·∫øt n·ªëi th√†nh c√¥ng hay kh√¥ng
                    fetchSchedules();
                })
                .catch(err => {
                    console.error('Error checking backend connection:', err);
                    // V·∫´n ƒë·∫∑t backendConnected = true ƒë·ªÉ kh√¥ng ch·∫∑n UI
                    setBackendConnected(true);
                    // V·∫´n t·∫£i d·ªØ li·ªáu ngay c·∫£ khi ki·ªÉm tra k·∫øt n·ªëi th·∫•t b·∫°i
                    fetchSchedules();
                });
        } catch (error) {
            console.error('Exception in connection check:', error);
            // V·∫´n ƒë·∫∑t backendConnected = true ƒë·ªÉ kh√¥ng ch·∫∑n UI
            setBackendConnected(true);
            // V·∫´n t·∫£i d·ªØ li·ªáu
            fetchSchedules();
        }
    }, []);

    const fetchSchedules = async () => {
        setLoading(true);
        console.log('üîÑ [fetchSchedules] B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·ªãch...');
        console.log('üîÑ [fetchSchedules] Called by:', new Error().stack.split('\n')[2]); // Log caller
        try {
            console.log('üì° [fetchSchedules] G·ªçi API getAllSchedulesAPI...');
            const response = await getAllSchedulesAPI();
            console.log('‚úÖ [fetchSchedules] Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API:', response);

            // Ki·ªÉm tra c·∫•u tr√∫c response ƒë·ªÉ x√°c ƒë·ªãnh n∆°i ch·ª©a d·ªØ li·ªáu
            let schedulesData = [];

            if (response && response.data) {
                schedulesData = response.data;
                console.log('üìã T√¨m th·∫•y d·ªØ li·ªáu trong response.data:', schedulesData.length, 'l·ªãch');
            } else if (response && Array.isArray(response)) {
                schedulesData = response;
                console.log('üìã T√¨m th·∫•y d·ªØ li·ªáu m·∫£ng tr·ª±c ti·∫øp trong response:', schedulesData.length, 'l·ªãch');
            } else if (response) {
                schedulesData = response;
                console.log('üìã S·ª≠ d·ª•ng to√†n b·ªô response l√†m d·ªØ li·ªáu');
            }

            // ƒê·∫£m b·∫£o schedulesData l√† m·ªôt m·∫£ng
            const schedulesList = Array.isArray(schedulesData) ? schedulesData : [];

            console.log('üìä D·ªØ li·ªáu l·ªãch sau khi x·ª≠ l√Ω:', schedulesList.length, 'l·ªãch');

            if (schedulesList.length > 0) {
                console.log('üîç B·∫Øt ƒë·∫ßu nh√≥m v√† ƒë·ªãnh d·∫°ng l·ªãch...');
                // Nh√≥m c√°c l·ªãch theo doctorId + date + slot ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng b·ªánh nh√¢n
                const slotGroups = {};

                schedulesList.forEach(schedule => {
                    // X√°c ƒë·ªãnh doctorId
                    let doctorId = null;
                    if (schedule.doctorId) {
                        doctorId = schedule.doctorId;
                    } else if (schedule.doctor_id) {
                        doctorId = schedule.doctor_id;
                    } else if (schedule.doctor && schedule.doctor.id) {
                        doctorId = schedule.doctor.id;
                    }

                    if (!doctorId) return; // B·ªè qua n·∫øu kh√¥ng c√≥ doctorId

                    const key = `${doctorId}_${schedule.date}_${schedule.slot}`;
                    if (!slotGroups[key]) {
                        slotGroups[key] = {
                            total: 0,
                            booked: 0,
                            schedules: []
                        };
                    }

                    slotGroups[key].total++;
                    if (schedule.patient_id || (schedule.patient && schedule.patient.id)) {
                        slotGroups[key].booked++;
                    }
                    slotGroups[key].schedules.push(schedule);
                });

                console.log('üë• Nh√≥m l·ªãch sau khi ƒë·∫øm:', Object.keys(slotGroups).length, 'nh√≥m');

                // Ch·ªçn m·ªôt l·ªãch ƒë·∫°i di·ªán cho m·ªói nh√≥m v√† th√™m th√¥ng tin s·ªë l∆∞·ª£ng b·ªánh nh√¢n
                const representativeSchedules = [];

                Object.entries(slotGroups).forEach(([key, group]) => {
                    // ∆Øu ti√™n l·ªãch tr·ªëng ƒë·ªÉ hi·ªÉn th·ªã
                    const emptySchedule = group.schedules.find(s => !s.patient_id && (!s.patient || !s.patient.id));
                    const schedule = emptySchedule || group.schedules[0];

                    // Th√™m th√¥ng tin s·ªë l∆∞·ª£ng b·ªánh nh√¢n
                    schedule.currentPatients = group.booked;
                    schedule.maxPatients = group.total;

                    representativeSchedules.push(schedule);
                });

                console.log('üë®‚Äç‚öïÔ∏è L·ªãch ƒë·∫°i di·ªán ƒë√£ t·∫°o:', representativeSchedules.length, 'l·ªãch');

                // ƒê·∫£m b·∫£o t·∫•t c·∫£ l·ªãch ƒë·ªÅu c√≥ tr·∫°ng th√°i l√† "available" (L√†m vi·ªác)
                const updatedSchedulesList = representativeSchedules.map(schedule => ({
                    ...schedule,
                    status: 'available' // Ghi ƒë√® tr·∫°ng th√°i th√†nh "available"
                }));

                // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API ƒë·ªÉ ph√π h·ª£p v·ªõi c·∫•u tr√∫c component
                const formattedSchedules = updatedSchedulesList
                    .map(schedule => {
                        const formatted = formatScheduleFromAPI(schedule);
                        return formatted;
                    })
                    .filter(Boolean); // L·ªçc b·ªè c√°c gi√° tr·ªã null

                console.log('‚ú® L·ªãch ƒë√£ ƒë·ªãnh d·∫°ng cu·ªëi c√πng:', formattedSchedules.length, 'l·ªãch');

                // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
                setTimeout(() => {
                    setSchedules(formattedSchedules);
                    console.log('üéâ ƒê√£ c·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu m·ªõi');
                }, 0);

                if (formattedSchedules.length === 0) {
                    showNotification('Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch t·ª´ server', 'info');
                }
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu l·ªãch');

                // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
                setTimeout(() => {
                    setSchedules([]);
                }, 0);

                showNotification('Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch t·ª´ server', 'info');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu l·ªãch:', error);

            // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
            setTimeout(() => {
                setSchedules([]);
            }, 0);

            // Hi·ªÉn th·ªã th√¥ng tin l·ªói chi ti·∫øt h∆°n
            if (error.response) {
                console.error('‚ùå L·ªói ph·∫£n h·ªìi:', error.response);
                showNotification(`L·ªói server: ${error.response.status} - ${error.response.statusText || 'Unknown error'}`, 'error');
            } else if (error.request) {
                console.error('‚ùå L·ªói y√™u c·∫ßu:', error.request);
                showNotification('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.', 'error');
            } else {
                showNotification(`L·ªói: ${error.message || 'Unknown error'}`, 'error');
            }
        } finally {
            setLoading(false);
            setInitialLoadComplete(true);
            console.log('üèÅ K·∫øt th√∫c qu√° tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch');
        }
    };

    const handleAddClick = (date) => {
        // Ki·ªÉm tra xem ng√†y ƒë∆∞·ª£c ch·ªçn c√≥ ph·∫£i l√† ng√†y qu√° kh·ª© kh√¥ng
        if (moment(date).isBefore(moment(), 'day')) {
            showNotification('Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch cho ng√†y ƒë√£ qua!', 'error');
            return;
        }

        setSelectedDate(date);
        setShowForm(true);
    };

    const handleScheduleSelect = (schedule) => {
        console.log('Selected schedule:', schedule);

        // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
        setTimeout(() => {
            setSelectedSchedule(schedule);
            setShowDetail(true);
        }, 0);
    };

    const handleScheduleCreated = async (newSchedule) => {
        try {
            console.log('Starting to create schedule with data:', newSchedule);

            // N·∫øu ƒë√≥ l√† m·ªôt m·∫£ng (nhi·ªÅu l·ªãch), x·ª≠ l√Ω t·ª´ng l·ªãch m·ªôt
            if (Array.isArray(newSchedule)) {
                console.log('Creating multiple schedules:', newSchedule.length);
                const createdSchedules = [];

                // X·ª≠ l√Ω tu·∫ßn t·ª± c√°c l·ªãch ƒë·ªÉ tr√°nh race condition
                for (const schedule of newSchedule) {
                    const scheduleData = prepareScheduleData(schedule);
                    console.log('Prepared data for API call:', scheduleData);

                    try {
                        const response = await createScheduleAPI(scheduleData);
                        console.log('Create schedule API response:', response);

                        if (response && response.data) {
                            const formattedSchedule = formatScheduleFromAPI(response.data);
                            createdSchedules.push(formattedSchedule);
                            console.log('Successfully created and formatted schedule:', formattedSchedule);
                        } else {
                            console.warn('API returned success but no data for schedule:', scheduleData);
                        }
                    } catch (error) {
                        console.error('Error creating individual schedule:', error);
                        console.error('Failed schedule data:', scheduleData);
                        if (error.response) {
                            console.error('Error response:', error.response.status, error.response.data);
                        }
                    }
                }

                // C·∫≠p nh·∫≠t state v·ªõi t·∫•t c·∫£ l·ªãch ƒë√£ t·∫°o th√†nh c√¥ng
                if (createdSchedules.length > 0) {
                    setSchedules(prevSchedules => [...prevSchedules, ...createdSchedules]);
                    showNotification(`ƒê√£ t·∫°o ${createdSchedules.length}/${newSchedule.length} l·ªãch th√†nh c√¥ng!`, 'success');
                } else {
                    showNotification('Kh√¥ng th·ªÉ t·∫°o l·ªãch, vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt', 'danger');
                }
            } else {
                // X·ª≠ l√Ω m·ªôt l·ªãch ƒë∆°n
                const scheduleData = prepareScheduleData(newSchedule);
                console.log('Prepared data for API call (single schedule):', scheduleData);

                const response = await createScheduleAPI(scheduleData);
                console.log('Create schedule API response (single):', response);

                if (response && response.data) {
                    console.log('API returned data:', response.data);
                    const formattedSchedule = formatScheduleFromAPI(response.data);
                    console.log('Formatted schedule:', formattedSchedule);

                    // Th√™m l·ªãch m·ªõi v√†o state
                    setSchedules(prevSchedules => [...prevSchedules, formattedSchedule]);

                    showNotification('T·∫°o l·ªãch th√†nh c√¥ng!', 'success');
                } else {
                    console.warn('API returned success but no data');
                    showNotification('API tr·∫£ v·ªÅ th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu', 'warning');
                }
            }

            // L√†m m·ªõi d·ªØ li·ªáu sau khi t·∫°o l·ªãch
            setTimeout(() => {
                fetchSchedules();
            }, 500);

        } catch (error) {
            console.error('Error in handleScheduleCreated:', error);
            if (error.response) {
                console.error('Error response:', error.response.status, error.response.data);
                showNotification(`L·ªói: ${error.response.status} - ${JSON.stringify(error.response.data)}`, 'danger');
            } else {
                showNotification(`L·ªói: ${error.message}`, 'danger');
            }
        }
    };

    // H√†m chu·∫©n b·ªã d·ªØ li·ªáu l·ªãch ƒë·ªÉ g·ª≠i ƒë·∫øn API
    const prepareScheduleData = (schedule) => {
        // Chuy·ªÉn ƒë·ªïi t·ª´ d·ªØ li·ªáu form sang ƒë·ªãnh d·∫°ng API
        console.log('Preparing schedule data for API:', schedule);

        // X√°c ƒë·ªãnh status d·ª±a tr√™n lo·∫°i thao t√°c (t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
        let status;
        if (schedule.original_status) {
            // N·∫øu ƒëang c·∫≠p nh·∫≠t, s·ª≠ d·ª•ng tr·∫°ng th√°i t·ª´ form ho·∫∑c gi·ªØ nguy√™n tr·∫°ng th√°i g·ªëc
            status = schedule.status ? (StatusMapping[schedule.status] || schedule.status) : schedule.original_status;
        } else {
            // N·∫øu ƒëang t·∫°o m·ªõi, ƒë·∫∑t tr·∫°ng th√°i l√† "Tr·ªëng"
            status = 'Tr·ªëng';
        }

        // S·ª≠ d·ª•ng tr∆∞·ªùng type ƒë·ªÉ l∆∞u th√¥ng tin ca l√†m vi·ªác (shiftType)
        // Theo ph·∫£n h·ªìi t·ª´ BE, tr∆∞·ªùng type c√≥ th·ªÉ d√πng ƒë·ªÉ l∆∞u shiftType
        const typeValue = schedule.shiftType || schedule.type;

        return {
            // N·∫øu ƒë√£ c√≥ type t·ª´ tr∆∞·ªõc, gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ shiftType
            type: typeValue,
            roomCode: schedule.roomCode, // S·ª≠ d·ª•ng roomCode t·ª´ form
            date: schedule.date, // Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng YYYY-MM-DD
            slot: schedule.slot, // S·ª≠ d·ª•ng slot t·ª´ form (ƒë·ªãnh d·∫°ng HH:mm:ss)
            doctorId: parseInt(schedule.doctorId),
            status: status,
            patient_id: schedule.patient_id !== undefined ? schedule.patient_id : null
        };
    };

    // H√†m ƒë·ªãnh d·∫°ng d·ªØ li·ªáu l·ªãch t·ª´ API ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI
    const formatScheduleFromAPI = (schedule) => {
        if (!schedule) {
            console.warn('Invalid schedule data: null or undefined');
            return null;
        }

        console.log('Formatting schedule data:', schedule);

        try {
            // L·∫•y th√¥ng tin t·ª´ ƒë·ªëi t∆∞·ª£ng schedule
            const id = schedule.id || `temp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
            const date = schedule.date;
            const slot = schedule.slot || '08:00:00'; // M·∫∑c ƒë·ªãnh l√† 8:00 n·∫øu kh√¥ng c√≥ slot

            // X·ª≠ l√Ω nhi·ªÅu c√°ch ƒë·ªÉ l·∫•y doctorId
            let doctorId = null;
            if (schedule.doctorId) {
                doctorId = schedule.doctorId;
            } else if (schedule.doctor_id) {
                doctorId = schedule.doctor_id;
            } else if (schedule.doctor && schedule.doctor.id) {
                doctorId = schedule.doctor.id;
            } else if (schedule.doctor) {
                doctorId = schedule.doctor;
            }

            // X·ª≠ l√Ω nhi·ªÅu c√°ch ƒë·ªÉ l·∫•y doctorName
            let doctorName = 'B√°c sƒ©';
            if (schedule.doctorName) {
                doctorName = schedule.doctorName;
            } else if (schedule.doctor && schedule.doctor.fullName) {
                doctorName = schedule.doctor.fullName;
            } else if (schedule.doctor && schedule.doctor.name) {
                doctorName = schedule.doctor.name;
            }

            // Chuy·ªÉn ƒë·ªïi status t·ª´ BE sang FE
            let status = 'available'; // default
            if (schedule.status && StatusMapping[schedule.status]) {
                status = StatusMapping[schedule.status];
            } else if (schedule.status) {
                status = schedule.status;
            }

            // L·∫•y th√¥ng tin ca l√†m vi·ªác t·ª´ tr∆∞·ªùng type
            // Theo ph·∫£n h·ªìi t·ª´ BE, tr∆∞·ªùng type c√≥ th·ªÉ ch·ª©a th√¥ng tin ca l√†m vi·ªác
            const type = schedule.type || null;
            const shiftType = type === 'morning' || type === 'afternoon' ? type : null;

            const roomCode = schedule.roomCode || schedule.room_code || '100';

            // ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã khung gi·ªù
            const slotDisplay = slot ? slot.substring(0, 5) : '08:00';

            // L·∫•y th√¥ng tin s·ªë l∆∞·ª£ng b·ªánh nh√¢n
            const currentPatients = schedule.currentPatients !== undefined ? schedule.currentPatients : 0;
            const maxPatients = schedule.maxPatients !== undefined ? schedule.maxPatients : 5;

            // T·∫°o title v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß h∆°n
            let title = `${doctorName} - ${slotDisplay} - P.${roomCode}`;

            // Th√™m th√¥ng tin ca l√†m vi·ªác v√†o title n·∫øu c√≥
            if (shiftType) {
                const shiftName = shiftType === 'morning' ? 'Ca s√°ng' : 'Ca chi·ªÅu';
                title = `${doctorName} - ${shiftName} - ${slotDisplay} - P.${roomCode}`;
            }

            // Th√™m th√¥ng tin s·ªë l∆∞·ª£ng b·ªánh nh√¢n v√†o title
            title += ` (${currentPatients}/${maxPatients})`;

            return {
                id: id,
                title: title,
                date: date,
                doctorId: doctorId,
                doctorName: doctorName,
                status: status,
                type: type,
                roomCode: roomCode,
                slot: slot,
                original_status: schedule.status, // L∆∞u tr·ªØ status nguy√™n b·∫£n t·ª´ BE
                shiftType: shiftType, // L∆∞u th√¥ng tin ca l√†m vi·ªác t·ª´ tr∆∞·ªùng type
                currentPatients: currentPatients, // Th√™m th√¥ng tin s·ªë b·ªánh nh√¢n hi·ªán t·∫°i
                maxPatients: maxPatients // Th√™m th√¥ng tin s·ªë b·ªánh nh√¢n t·ªëi ƒëa
            };
        } catch (error) {
            console.error('Error formatting schedule:', error, schedule);
            return null;
        }
    };

    const handleScheduleUpdate = async (updatedSchedule) => {
        try {
            console.log('=== TI·∫æN TR√åNH G·ªåI API C·∫¨P NH·∫¨T ===');
            console.log('1. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', updatedSchedule);

            // Ki·ªÉm tra k·∫øt n·ªëi
            console.log('2. Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server...');
            const connectionCheck = await checkBackendConnection();
            console.log('3. K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi:', connectionCheck);

            if (!connectionCheck.success) {
                console.error('4. L·ªói k·∫øt n·ªëi:', connectionCheck.error);
                showNotification('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng', 'danger');
                return;
            }

            // ƒê·∫£m b·∫£o tr∆∞·ªùng type ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi gi√° tr·ªã c·ªßa shiftType
            if (updatedSchedule.shiftType && !updatedSchedule.type) {
                updatedSchedule.type = updatedSchedule.shiftType;
            }

            console.log('5. Th√¥ng tin ca l√†m vi·ªác:', {
                shiftType: updatedSchedule.shiftType,
                type: updatedSchedule.type
            });

            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn API
            const scheduleData = prepareScheduleData(updatedSchedule);
            console.log('6. D·ªØ li·ªáu ƒë√£ chu·∫©n b·ªã cho API:', scheduleData);

            // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t l·ªãch
            console.log('7. B·∫Øt ƒë·∫ßu g·ªçi API v·ªõi ID:', updatedSchedule.id);
            const response = await updateScheduleAPI(updatedSchedule.id, scheduleData);
            console.log('8. Ph·∫£n h·ªìi t·ª´ API:', response);

            if (response && response.data) {
                console.log('9. C·∫≠p nh·∫≠t th√†nh c√¥ng, d·ªØ li·ªáu tr·∫£ v·ªÅ:', response.data);

                // N·∫øu API th√†nh c√¥ng, c·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu t·ª´ API
                const formattedUpdatedSchedule = formatScheduleFromAPI(response.data);
                console.log('10. D·ªØ li·ªáu sau khi format:', formattedUpdatedSchedule);

                // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
                setTimeout(() => {
                    setSchedules(prevSchedules =>
                        prevSchedules.map(schedule =>
                            schedule.id === updatedSchedule.id ? formattedUpdatedSchedule : schedule
                        )
                    );

                    showNotification('C·∫≠p nh·∫≠t l·ªãch th√†nh c√¥ng!', 'success');

                    // L√†m m·ªõi d·ªØ li·ªáu t·ª´ server sau khi c·∫≠p nh·∫≠t
                    setTimeout(() => {
                        console.log('11. L√†m m·ªõi d·ªØ li·ªáu t·ª´ server');
                        fetchSchedules();
                    }, 500);
                }, 0);
            } else {
                console.warn('12. API tr·∫£ v·ªÅ th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu');
                showNotification('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch, vui l√≤ng th·ª≠ l·∫°i sau', 'warning');
            }
        } catch (error) {
            console.error('13. L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t:', error);
            if (error.response) {
                console.error('14. Chi ti·∫øt l·ªói t·ª´ server:', {
                    status: error.response.status,
                    data: error.response.data,
                    headers: error.response.headers
                });
            }
            showNotification('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server, vui l√≤ng th·ª≠ l·∫°i sau', 'danger');
        }
        console.log('=== K·∫æT TH√öC TI·∫æN TR√åNH C·∫¨P NH·∫¨T ===');
    };

    const handleScheduleDelete = async (scheduleId) => {
        try {
            if (!scheduleId) {
                console.error('Invalid schedule ID:', scheduleId);
                showNotification('Kh√¥ng th·ªÉ x√≥a l·ªãch: ID kh√¥ng h·ª£p l·ªá', 'danger');
                return;
            }

            // G·ªçi API ƒë·ªÉ x√≥a l·ªãch
            console.log('Deleting schedule with ID:', scheduleId);
            const response = await deleteScheduleAPI(scheduleId);
            console.log('Delete schedule response:', response);

            // Ki·ªÉm tra response t·ª´ API
            if (response && (response.status === 200 || response.status === 204 || response.data?.message?.includes('success'))) {
                // C·∫≠p nh·∫≠t state sau khi x√≥a th√†nh c√¥ng
                setSchedules(prevSchedules =>
                    prevSchedules.filter(schedule => schedule.id !== scheduleId)
                );

                showNotification('X√≥a l·ªãch th√†nh c√¥ng! ƒêang l√†m m·ªõi d·ªØ li·ªáu...', 'success');

                // L√†m m·ªõi d·ªØ li·ªáu t·ª´ server sau khi x√≥a
                // S·ª≠ d·ª•ng async/await ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c l√†m m·ªõi
                try {
                    // ƒê·∫∑t m·ªôt timeout ng·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc
                    await new Promise(resolve => setTimeout(resolve, 300));
                    await fetchSchedules();
                    showNotification('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', 'success');
                } catch (refreshError) {
                    console.error('Error refreshing schedules:', refreshError);
                    showNotification('Kh√¥ng th·ªÉ l√†m m·ªõi d·ªØ li·ªáu, vui l√≤ng t·∫£i l·∫°i trang', 'warning');
                }
            } else {
                console.warn('API returned unexpected response:', response);
                showNotification('ƒê√£ x√≥a l·ªãch th√†nh c√¥ng', 'success');

                // V·∫´n c·∫≠p nh·∫≠t UI ƒë·ªÉ ng∆∞·ªùi d√πng kh√¥ng th·∫•y l·ªãch ƒë√£ x√≥a
                setSchedules(prevSchedules =>
                    prevSchedules.filter(schedule => schedule.id !== scheduleId)
                );

                // V·∫´n th·ª≠ l√†m m·ªõi d·ªØ li·ªáu
                setTimeout(() => {
                    fetchSchedules();
                }, 300);
            }
        } catch (error) {
            console.error('Error deleting schedule:', error);

            if (error.response) {
                console.error('Error response:', error.response);

                // X·ª≠ l√Ω c√°c m√£ l·ªói c·ª• th·ªÉ
                if (error.response.status === 404) {
                    showNotification('ƒê√£ x√≥a l·ªãch th√†nh c√¥ng', 'success');

                    // X√≥a kh·ªèi UI n·∫øu kh√¥ng t√¨m th·∫•y tr√™n server
                    setSchedules(prevSchedules =>
                        prevSchedules.filter(schedule => schedule.id !== scheduleId)
                    );

                    // V·∫´n th·ª≠ l√†m m·ªõi d·ªØ li·ªáu
                    setTimeout(() => {
                        fetchSchedules();
                    }, 300);
                    return;
                }

                showNotification(`L·ªói server: ${error.response.status} - ${error.response.statusText || 'Unknown error'}`, 'danger');
            } else if (error.request) {
                showNotification('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng', 'danger');
            } else {
                showNotification(`L·ªói: ${error.message || 'Unknown error'}`, 'danger');
            }
        }
    };

    // ƒê·∫£m b·∫£o r·∫±ng filteredSchedules l√† m·ªôt m·∫£ng r·ªóng khi kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API
    const filteredSchedules = initialLoadComplete ? schedules.filter(schedule => {
        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (!schedule || !schedule.id || !schedule.date) {
            console.warn('Invalid schedule data:', schedule);
            return false;
        }

        let match = true;

        // L·ªçc theo b√°c sƒ©
        if (selectedDoctor) {
            match = match && schedule.doctorId?.toString() === selectedDoctor.toString();
        }

        return match;
    }) : [];

    console.log('Filtered schedules to pass to Calendar:', filteredSchedules);

    // H√†m hi·ªÉn th·ªã th√¥ng b√°o Ant Design Notification
    const showNotification = (msg, type = 'success') => {
        const config = {
            message: 'Th√¥ng b√°o',
            description: msg,
            placement: 'topRight',
            duration: 3,
        };

        switch (type) {
            case 'success':
                notification.success(config);
                break;
            case 'danger':
            case 'error':
                notification.error({
                    ...config,
                    message: 'L·ªói'
                });
                break;
            case 'warning':
                notification.warning({
                    ...config,
                    message: 'C·∫£nh b√°o'
                });
                break;
            case 'info':
                notification.info({
                    ...config,
                    message: 'Th√¥ng tin'
                });
                break;
            default:
                notification.info(config);
        }
    };

    const handleRefreshData = () => {
        // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
        setTimeout(() => {
            // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong localStorage v√† sessionStorage li√™n quan ƒë·∫øn calendar
            try {
                const localStorageKeys = Object.keys(localStorage);
                localStorageKeys.forEach(key => {
                    if (key.includes('fullcalendar') || key.includes('fc-') || key.includes('calendar') ||
                        key.includes('event') || key.includes('schedule')) {
                        console.log('Removing from localStorage:', key);
                        localStorage.removeItem(key);
                    }
                });

                const sessionStorageKeys = Object.keys(sessionStorage);
                sessionStorageKeys.forEach(key => {
                    if (key.includes('fullcalendar') || key.includes('fc-') || key.includes('calendar') ||
                        key.includes('event') || key.includes('schedule')) {
                        console.log('Removing from sessionStorage:', key);
                        sessionStorage.removeItem(key);
                    }
                });

                // X√≥a c√°c key c·ª• th·ªÉ
                localStorage.removeItem('fc-event-sources');
                localStorage.removeItem('fc-view-state');
                sessionStorage.removeItem('fc-event-sources');
                sessionStorage.removeItem('fc-view-state');
            } catch (error) {
                console.error('Error clearing storage:', error);
            }
        }, 0);

        // Reset state - s·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh FlushSync error
        setTimeout(() => {
            setSchedules([]);
            setSelectedSchedule(null);
            setSelectedDate(null);
            setShowDetail(false);
            setShowForm(false);
            setLoading(true);
        }, 0);

        // ƒê·∫∑t m·ªôt flag ƒë·ªÉ tr√°nh v√≤ng l·∫∑p c·∫≠p nh·∫≠t v√¥ h·∫°n
        const refreshTimestamp = Date.now();
        sessionStorage.setItem('last_refresh_timestamp', refreshTimestamp.toString());

        // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ tr√°nh v√≤ng l·∫∑p c·∫≠p nh·∫≠t
        setTimeout(() => {
            fetchSchedules();
        }, 100);

        showNotification('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu', 'success');
    };

    // H√†m chuy·ªÉn ƒë·ªïi th·ª© sang ti·∫øng Vi·ªát
    const formatVietnameseDay = (date) => {
        const weekdays = [
            'Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞',
            'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y'
        ];
        const dayOfWeek = moment(date).day(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© hai, ...
        return weekdays[dayOfWeek];
    };

    return (
        <div className="container-fluid py-4">
            <div className="schedule-header">
                <h1 className="schedule-title text-center">Qu·∫£n l√Ω l·ªãch l√†m vi·ªác b√°c sƒ©</h1>
            </div>



            <Row className="mb-4 filter-row">
                <Col md={3} className="filter-col">
                    <DoctorFilter
                        onDoctorSelect={setSelectedDoctor}
                        selectedDoctor={selectedDoctor}
                    />
                </Col>
                <Col md={9} className="filter-col text-end">
                    <div className="button-container">
                        <button
                            className="add-schedule-button"
                            onClick={() => handleAddClick(new Date())}
                            disabled={loading}
                        >
                            <BsCalendarPlus className="me-2" />
                            Th√™m l·ªãch m·ªõi
                        </button>
                    </div>
                </Col>
            </Row>

            <div className="calendar-wrapper">
                {loading && !initialLoadComplete ? (
                    <div className="text-center p-5">
                        <Spinner animation="border" />
                        <p className="mt-3">ƒêang t·∫£i d·ªØ li·ªáu l·ªãch...</p>
                    </div>
                ) : (
                    <Calendar
                        events={filteredSchedules}
                        onDateSelect={handleAddClick}
                        onEventSelect={handleScheduleSelect}
                    />
                )}
            </div>

            <ScheduleForm
                show={showForm}
                onHide={() => setShowForm(false)}
                selectedDate={selectedDate}
                selectedDoctor={selectedDoctor}
                onScheduleCreated={handleScheduleCreated}
                existingSchedules={schedules}
                onShowToast={showNotification}
            />

            <ScheduleDetail
                show={showDetail}
                onHide={() => setShowDetail(false)}
                schedule={selectedSchedule}
                onUpdate={handleScheduleUpdate}
                onDelete={handleScheduleDelete}
                onShowToast={showNotification}
                onRefreshData={fetchSchedules}
            />
        </div>
    );
};

export default ManagerSchedule;
